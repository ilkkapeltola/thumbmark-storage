useDotenv: true

frameworkVersion: "3"

service: ${env:SERVICE_NAME}

provider:
  name: aws
  region: eu-central-1
  runtime: nodejs18.x
  stage: ${opt:stage, 'test'}
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
    SERVICE_NAME: ${env:SERVICE_NAME}
    TEST_DOMAIN: ${env:TEST_DOMAIN}
    PROD_DOMAIN: ${env:PROD_DOMAIN}
    CERTIFICATE_NAME: ${env:CERTIFICATE_NAME}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
#            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
#            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

plugins:
  - serverless-better-credentials
  - serverless-esbuild
  - serverless-dynamodb
  - serverless-offline
  - serverless-domain-manager # uncomment if you want to use custom domain

custom:
  domain:
    test: ${env:TEST_DOMAIN}
    prod: ${env:PROD_DOMAIN}
  allowedOrigins:
    test:
      - '*'
    prod: ${file(env.js):allowedOrigins}
  dynamodb:
    stages:
      - test
    start:
        port: 8000
        inMemory: false
        migrate: true
  customDomain:
    domainName: ${self:custom.domain.${self:provider.stage}}
    basePath: 'v1'
    createRoute53Record: true
    stage: ${self:provider.stage}
    certificateName: ${env:CERTIFICATE_NAME}

functions:
  create:
    handler: storage/create.create
    timeout: 30
    events:
      - http:
          path: fingerprint
          method: post
          cors:
            origins: ${self:custom.allowedOrigins.${self:provider.stage}, '*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  get:
    handler: storage/get.get
    events:
      - http:
          path: fingerprint/{namespace}/{fingerprint}/{key}
          method: get
          cors:
            origins: ${self:custom.allowedOrigins.${self:provider.stage}, '*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false



resources:
  Conditions:
    IsTest:
      Fn::Equals:
        - ${self:provider.stage}
        - test
    IsProd:
      Fn::Equals:
        - ${self:provider.stage}
        - prod
  Resources:
    ThumbmarkStorageTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        ProvisionedThroughput:
          Fn::If:
            - IsTest
            - ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            - Ref: 'AWS::NoValue'
        BillingMode:
          Fn::If:
            - IsProd
            - PAY_PER_REQUEST
            - PROVISIONED
        AttributeDefinitions:
          - AttributeName: fingerprint
            AttributeType: S
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: fingerprint
            KeyType: HASH
          - AttributeName: key
            KeyType: RANGE
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: expiresAt
